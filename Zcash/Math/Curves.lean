import Mathlib.Algebra.Group.Defs
import Mathlib.Algebra.Field.Defs
import Mathlib.Tactic
import Zcash.Tactic

/-
Theorem A.3.4. Distinct-x theorem.

https://zips.z.cash/protocol/protocol.pdf#thmdistinctx

Let Q be a point of odd-prime order s on a Montgomery curve M = E_{Mont(A_M, B_M)} over ùîΩ_{r_ùïä}.
Let k‚ÇÅ, k‚ÇÇ be integers in {-(s-1)/2 .. (s-1)/2} \ {0}. Let P·µ¢ = [ k·µ¢ ] Q = (x·µ¢, y·µ¢) for i ‚àà {1,2},
with k‚ÇÇ ‚â† ¬±k‚ÇÅ. Then the non-unified addition constraints

  (x‚ÇÇ - x‚ÇÅ) √ó (Œª) = (y‚ÇÇ - y‚ÇÅ)
  (B_M * Œª) √ó (Œª) = (A_M + x‚ÇÅ + x‚ÇÇ + x‚ÇÉ)
  (x‚ÇÅ - x‚ÇÉ) √ó (Œª) = (y‚ÇÉ + y‚ÇÅ)

implement the affine-Montgomery addition P‚ÇÅ + P‚ÇÇ = (x‚ÇÉ, y‚ÇÉ) for all such P‚ÇÅ, P‚ÇÇ.

Proof. The given constraints are equivalent to the Montgomery addition formulae under the side
condition that x‚ÇÅ ‚â† x‚ÇÇ. (Note that neither P·µ¢ can be the zero point since k‚ÇÅ, k‚ÇÇ ‚â† 0 (mod s).
Assume for a contradiction that x‚ÇÅ = x‚ÇÇ. For any P‚ÇÅ = [ k‚ÇÅ ] Q, there can be only one other point
-P‚ÇÅ with the same x-coordinate. (This follows from the fact that the curve equation determines ¬±y
as a function of x.) But -P‚ÇÅ = -(k‚ÇÅ ‚Ä¢ Q) = -k‚ÇÅ ‚Ä¢ Q. Since k : {-(s-1)/2 .. (s-1)/2} ‚Ü¶ k ‚Ä¢ Q : M
is injective and k‚ÇÅ, k‚ÇÇ are in {-(s-1)/2 .. (s-1)/2}, then k‚ÇÇ = ¬±k‚ÇÅ (contradiction).
-/

/- Field of definition. We do not depend on it being a field. -/
variable (F : Type)

/- M is an additive group. -/
variable (M : Type) [AddGroup M]

/- The order of M, an odd prime s. -/
variable (s : ‚Ñï) (prime_s : Prime s) (s_gt_2 : s > 2)
variable (smulwithzero : SMulWithZero (ZMod s) M)

/-- We define the range of non-zero scalars to be symmetric on 0, rather than unsigned. -/
def nz_symmetric_range : Set ‚Ñ§ := { k | |k| ‚â§ (s-1)/2 ‚àß k ‚â† 0 }

/-- If k ‚àà nz_symmetric_range s then so is -k. -/
lemma neg_bij_on_nz_symmetric_range (k : ‚Ñ§) (kin : k ‚àà nz_symmetric_range s) : -k ‚àà nz_symmetric_range s := by
  unfold nz_symmetric_range at kin
  unfold nz_symmetric_range
  simp_all only [ne_eq, Set.mem_setOf_eq, abs_neg, neg_eq_zero, not_false_eq_true, and_self]

/-- The set of non-zero points in M. -/
def nonzero : Set M := { P | P ‚â† 0 }

/-- Negating a non-zero point gives a non-zero point. -/
lemma negnz (P : nonzero M) : -(P:M) ‚àà nonzero M := by
  obtain ‚ü®P, P_nz‚ü© := P; simp_all only
  have mP_nz : -P ‚â† 0 := by
    by_contra contra
    apply P_nz
    have mmP_eq_mz : -(-P) = -0 := by simp_all only
    have P_eq_mz : P = -0 := by group at mmP_eq_mz; exact mmP_eq_mz
    simp_all only [neg_zero, add_eq_left]
  exact mP_nz

/-
TODO this states something that relies on an x-axis symmetry property that is true for
Montgomery and short Weierstrass curves, but does not prove that property for those curves.
-/

theorem distinct_x_axis_symmetric
    /-
    There is a projection of non-zero points of M to the x line on F.
    This is where we break open the group abstraction and consider M to have structure, such as an elliptic curve.
    -/
    (proj_x : nonzero M ‚Üí F)
    -- Any two points of M that have the same projection to the x line are equal up to sign.
    (x_axis_symmetry : (R‚ÇÅ : nonzero M) ‚Üí (R‚ÇÇ : nonzero M) ‚Üí (proj_x R‚ÇÅ = proj_x R‚ÇÇ) ‚Üí ((R‚ÇÅ:M) = R‚ÇÇ ‚à® -(R‚ÇÅ:M) = R‚ÇÇ))
    -- Q is a point of M that we use as a generator.
    (Q : M)
    -- k : nz_symmetric_range s ‚Ü¶ k ‚Ä¢ Q : M is injective. This requires Q to be of order at least s.
    (nz_symmetric_range_inj : Set.InjOn (fun (k : ‚Ñ§) => k ‚Ä¢ Q) (nz_symmetric_range s))
    -- k‚ÇÅ and k‚ÇÇ are non-zero scalars that span the order of M.
    (k‚ÇÅ : nz_symmetric_range s)
    (k‚ÇÇ : nz_symmetric_range s)
    -- k‚ÇÅ and k‚ÇÇ are not equal up to sign.
    (k‚ÇÅ_neq_k‚ÇÇ : (k‚ÇÅ:‚Ñ§) ‚â† k‚ÇÇ) (mk‚ÇÅ_neq_k‚ÇÇ : -(k‚ÇÅ:‚Ñ§) ‚â† k‚ÇÇ)
    -- P‚ÇÅ = k‚ÇÅ ‚Ä¢ Q and P‚ÇÇ = k‚ÇÇ ‚Ä¢ Q are non-zero points of M.
    (P‚ÇÅ : nonzero M) (P‚ÇÅ_mul : P‚ÇÅ = (k‚ÇÅ:‚Ñ§) ‚Ä¢ Q)
    (P‚ÇÇ : nonzero M) (P‚ÇÇ_mul : P‚ÇÇ = (k‚ÇÇ:‚Ñ§) ‚Ä¢ Q)
  : -- Then we conclude that P‚ÇÅ and P‚ÇÇ have distinct projections to the x line.
    proj_x P‚ÇÅ ‚â† proj_x P‚ÇÇ :=
  by
    have hk‚ÇÅ : ‚Üëk‚ÇÅ ‚àà nz_symmetric_range s := by simp_all only [Subtype.coe_prop]
    have hk‚ÇÇ : ‚Üëk‚ÇÇ ‚àà nz_symmetric_range s := by simp_all only [Subtype.coe_prop]
    by_contra contra
    have h1 : (P‚ÇÅ:M) = P‚ÇÇ ‚à® -(P‚ÇÅ:M) = P‚ÇÇ := by apply x_axis_symmetry; trivial
    have h2 : (k‚ÇÅ:‚Ñ§) ‚Ä¢ Q = (k‚ÇÇ:‚Ñ§) ‚Ä¢ Q ‚à® (-(k‚ÇÅ:‚Ñ§)) ‚Ä¢ Q = (k‚ÇÇ:‚Ñ§) ‚Ä¢ Q := by simp_all only [neg_zsmul]
    cases h2 with
    | inl left => let k‚ÇÅ_eq_k‚ÇÇ := nz_symmetric_range_inj hk‚ÇÅ hk‚ÇÇ left; contradiction
    | inr right => let mk‚ÇÅ_eq_k‚ÇÇ := nz_symmetric_range_inj (neg_bij_on_nz_symmetric_range s k‚ÇÅ hk‚ÇÅ) hk‚ÇÇ right; contradiction

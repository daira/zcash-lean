import Mathlib.Algebra.Group.Defs
import Mathlib.Algebra.Field.Defs
import Mathlib.Tactic
import Zcash.Tactic

/-
Theorem A.3.4. Distinct-x theorem.

Let Q be a point of odd-prime order s on a Montgomery curve M = E_{Mont(A_M, B_M)} over ùîΩ_{r_ùïä}.
Let k‚ÇÅ, k‚ÇÇ be integers in {-(s-1)/2 .. (s-1)/2} \ {0}. Let P·µ¢ = [ k·µ¢ ] Q = (x·µ¢, y·µ¢) for i ‚àà {1,2},
with k‚ÇÇ ‚â† ¬±k‚ÇÅ. Then the non-unified addition constraints

  (x‚ÇÇ - x‚ÇÅ) √ó (Œª) = (y‚ÇÇ - y‚ÇÅ)
  (B_M * Œª) √ó (Œª) = (A_M + x‚ÇÅ + x‚ÇÇ + x‚ÇÉ)
  (x‚ÇÅ - x‚ÇÉ) √ó (Œª) = (y‚ÇÉ + y‚ÇÅ)

implement the affine-Montgomery addition P‚ÇÅ + P‚ÇÇ = (x‚ÇÉ, y‚ÇÉ) for all such P‚ÇÅ, P‚ÇÇ.

Proof. The given constraints are equivalent to the Montgomery addition formulae under the side
condition that x‚ÇÅ ‚â† x‚ÇÇ. (Note that neither P·µ¢ can be the zero point since k‚ÇÅ, k‚ÇÇ ‚â† 0 (mod s).
Assume for a contradiction that x‚ÇÅ = x‚ÇÇ. For any P‚ÇÅ = [ k‚ÇÅ ] Q, there can be only one other point
-P‚ÇÅ with the same x-coordinate. (This follows from the fact that the curve equation determines ¬±y
as a function of x.) But -P‚ÇÅ = [ -1 ] [ k‚ÇÅ ] Q = [ -k‚ÇÅ ] Q. Since k : {-(s-1)/2 .. (s-1)/2} ‚Ü¶ [ k ] Q : M
is injective and k‚ÇÅ, k‚ÇÇ are in {-(s-1)/2 .. (s-1)/2}, then k‚ÇÇ = ¬±k‚ÇÅ (contradiction).
-/

variable (F : Type) [Field F] -- field of definition
variable (s : ‚Ñï) (prime_s : Prime s) (s_gt_2 : s > 2)

variable (M : Type) [AddGroup M] [Zero M]
variable (smulwithzero : SMulWithZero (ZMod s) M)

/-
TODO this states something that relies on an x-axis symmetry property that is true for
Montgomery and short Weierstrass curves, but does not prove that property for those curves.
-/

theorem distinct_x_axis_symmetric
    (k‚ÇÅ : ‚Ñ§) (k‚ÇÅ_in_range : -(s-1)/2 ‚â§ k‚ÇÅ ‚àß k‚ÇÅ ‚â§ (s-1)/2) (k‚ÇÅ_nz : k‚ÇÅ ‚â† 0)
    (k‚ÇÇ : ‚Ñ§) (k‚ÇÇ_in_range : -(s-1)/2 ‚â§ k‚ÇÇ ‚àß k‚ÇÇ ‚â§ (s-1)/2) (k‚ÇÇ_nz : k‚ÇÇ ‚â† 0)
    (pm_k‚ÇÅ_neq_k‚ÇÇ : k‚ÇÅ ‚â† k‚ÇÇ ‚àß -k‚ÇÅ ‚â† k‚ÇÇ)
    (P‚ÇÅ : M) (P‚ÇÇ : M) (Q : M) (Q_nz : Q ‚â† 0)
    (P‚ÇÅ_mul : P‚ÇÅ = k‚ÇÅ ‚Ä¢ Q)
    (P‚ÇÇ_mul : P‚ÇÇ = k‚ÇÇ ‚Ä¢ Q)
    (order_s : (k : ZMod s) ‚Üí (k_nz : k ‚â† 0) ‚Üí (P : M) ‚Üí (P_nz : P ‚â† 0) ‚Üí k ‚Ä¢ P ‚â† 0)
    (proj_x : M ‚Üí F)
    (x_axis_symmetry : (P‚ÇÅ : M) ‚Üí (P‚ÇÇ : M) ‚Üí (proj_x P‚ÇÅ = proj_x P‚ÇÇ) ‚Üí (P‚ÇÅ = P‚ÇÇ ‚à® -P‚ÇÅ = P‚ÇÇ))
  : proj_x P‚ÇÅ ‚â† proj_x P‚ÇÇ := by
  by_contra
  have h1 : P‚ÇÅ = P‚ÇÇ ‚à® -P‚ÇÅ = P‚ÇÇ := by apply x_axis_symmetry; trivial
  have h2 : k‚ÇÅ ‚Ä¢ Q = k‚ÇÇ ‚Ä¢ Q ‚à® (-k‚ÇÅ) ‚Ä¢ Q = k‚ÇÇ ‚Ä¢ Q := by simp_all only [neg_zsmul]
  sorry
